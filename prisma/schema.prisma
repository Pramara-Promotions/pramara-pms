// prisma/schema.prisma
generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Project {
  id          Int       @id @default(autoincrement())
  code        String
  name        String
  sku         String?
  quantity    Int
  cutoffDate  DateTime?
  pantoneCode String?
  createdAt   DateTime  @default(now())

  qcRecords      QCRecord[]
  alerts         Alert[]
  alertRules     AlertRule[]
  inventoryNeeds InventoryNeed[] // <â€” back-relation added
}

model QCRecord {
  id           Int      @id @default(autoincrement())
  projectId    Int
  project      Project  @relation(fields: [projectId], references: [id])
  batchCode    String
  passed       Int
  rejected     Int
  reason       String
  pantoneMatch String // "Match" | "Mismatch"
  createdAt    DateTime @default(now())
}

model InventoryNeed {
  id           Int      @id @default(autoincrement())
  projectId    Int
  material     String
  requiredQty  Int      @default(0)
  availableQty Int      @default(0)
  shortfall    Int      @default(0)
  updatedAt    DateTime @default(now())

  Project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model AlertRule {
  id         Int      @id @default(autoincrement())
  projectId  Int
  project    Project  @relation(fields: [projectId], references: [id])
  key        String // e.g., "QC.rejected", "Inventory.shortfall", "Pantone.mismatch"
  level      String // "AMBER" | "RED"
  threshold  Int
  recipients String // comma-separated emails
  enabled    Boolean  @default(true)
  createdAt  DateTime @default(now())
}

enum AlertStatus {
  OPEN
  ACKNOWLEDGED
  RESOLVED
  CLOSED
}

enum AlertActionType {
  ACK
  RESOLVE
  COMMENT
  REOPEN
}

model Alert {
  id        Int           @id @default(autoincrement())
  projectId Int
  project   Project       @relation(fields: [projectId], references: [id])
  level     String // AMBER | RED
  message   String
  status    AlertStatus   @default(OPEN)
  createdAt DateTime      @default(now())
  actions   AlertAction[]
}

model AlertAction {
  id                Int             @id @default(autoincrement())
  alertId           Int
  alert             Alert           @relation(fields: [alertId], references: [id])
  action            AlertActionType // ACK | RESOLVE | COMMENT | REOPEN
  by                String // who did it (name/email)
  note              String?
  correctiveActions String? // free text; keep simple for now
  preventRecurrence String?
  costImpactCents   Int? // optional, positive or negative
  costNote          String?
  createdAt         DateTime        @default(now())
}
